From c35f20820abe93a6034ed0bab9cd01492dbd6f73 Mon Sep 17 00:00:00 2001
From: Paul LoBuglio <paullo101123@gmail.com>
Date: Sat, 24 Jan 2015 17:53:07 -0500
Subject: [PATCH] tested ramp up control code: successful!

---
 org/usfirst/frc/team1389/robot/Constants.java      |  6 +--
 org/usfirst/frc/team1389/robot/DriveControl.java   | 57 +++++++---------------
 .../frc/team1389/robot/ElevatorControl.java        |  6 +++
 org/usfirst/frc/team1389/robot/Robot.java          |  9 ++--
 4 files changed, 31 insertions(+), 47 deletions(-)

diff --git a/org/usfirst/frc/team1389/robot/Constants.java b/org/usfirst/frc/team1389/robot/Constants.java
index e0bc4c0..444636a 100644
--- a/org/usfirst/frc/team1389/robot/Constants.java
+++ b/org/usfirst/frc/team1389/robot/Constants.java
@@ -21,8 +21,8 @@ package org.usfirst.frc.team1389.robot;
 
 public class Constants {
 	
-	static final double MAX_ACCELERATION   = 0.2;
-	static final double PERCENT_POWER_CHANGE = 0.01;
+	static final double MAX_ACCELERATION   = 0.05;
+	static final double PERCENT_POWER_CHANGE = 0.025;
 	
 	//Joystick input values
 	static final int ButtonX 			  = 3; // XBox Controller X Button number for getRawButton= or getRawAxis=
@@ -72,7 +72,7 @@ public class Constants {
 	static final int ENCODER_2B           = 11;
 
 	//Values
-	static final float LIMITER            = (float) 1.5; //Approximately sqrt(2)
+	static final float LIMITER            = (float) 1.42; //Approximately sqrt(2)
 	static final float ELEVATOR_SPEED_MOD = 1;
 
 }
diff --git a/org/usfirst/frc/team1389/robot/DriveControl.java b/org/usfirst/frc/team1389/robot/DriveControl.java
index 73e962e..9d31dbc 100644
--- a/org/usfirst/frc/team1389/robot/DriveControl.java
+++ b/org/usfirst/frc/team1389/robot/DriveControl.java
@@ -38,54 +38,31 @@ public class DriveControl extends Component{
 	@Override
 	public void teleopTick(InputState state)
 	{
-		SmartDashboard.putBoolean("Drive ticking", true);
 		double x = state.getDrive().getLeftX()*(invertedX?1:-1);
 		double y = state.getDrive().getLeftY()*(invertedY?1:-1);
-		//Debug
-		SmartDashboard.putNumber("Driver LeftX", x);
-		SmartDashboard.putNumber("Driver LeftY", y);
-		//SmartDashboard.putNumber("Left Power", (y + x) / Constants.LIMITER);
-		//	SmartDashboard.putNumber("Right Power", (y - x) / Constants.LIMITER);
-		//x += selfTurn(state);
+		x += selfTurn(state);
 		double leftPower=leftCoef*(y + x) / Constants.LIMITER;
 		double rightPower=rightCoef*(y - x) / Constants.LIMITER * -1;
-		/*if (state.getDrive().isButtonA() && Math.abs(state.getAccelerometer().getX()) > Constants.MAX_ACCELERATION){
-			if (state.getAccelerometer().getX() > 0){
-				lastLeft *= .5;
-				lastRight *= .5;
-			} else {
-				lastLeft /= .5;
-				lastRight /= .5;
-			}
-		}else{
-			lastLeft = leftPower;
-			lastRight = rightPower;
-		}*/
-		double proportionalChange = Constants.PERCENT_POWER_CHANGE * Math.abs(leftPower - actualLeft);
-		if (leftPower > actualLeft + proportionalChange){
-			actualLeft += proportionalChange;
-		} else if (leftPower < actualLeft - proportionalChange){
-			actualLeft -= proportionalChange;
-		} else {
-			actualLeft = leftPower;
-		}
-		
-		proportionalChange = Constants.PERCENT_POWER_CHANGE * Math.abs(rightPower - actualRight);
-		if (rightPower > actualRight + proportionalChange){
-			actualRight += proportionalChange;
-		} else if (rightPower < actualRight - proportionalChange){
-			actualRight -= proportionalChange;
-		} else {
-			actualRight = rightPower;
-		}
+
+		actualLeft=setPower(leftPower,actualLeft);
+		actualRight=setPower(rightPower,actualRight);
 		LFDrive.set(actualLeft);
 		LBDrive.set(actualLeft);
 		RFDrive.set(actualRight);
 		RBDrive.set(actualRight);
-		SmartDashboard.putNumber("Left Power", leftPower);
-		SmartDashboard.putNumber("Right Power", rightPower);
-		//VerifyVelocity(leftVel,rightVel,state.getEncoder1(),state.getEncoder2());
-
+		SmartDashboard.putNumber("Power", (double)((int)(100*((actualLeft + actualRight) / 2)))/100);
+		//VerifyVelocity(actualLeft,actualRight,state.getEncoder1(),state.getEncoder2());
+	}
+	private double setPower(double Power, double actualPower){
+		double proportionalChange = Constants.PERCENT_POWER_CHANGE * Math.abs(Power - actualPower);
+		if (Power > actualPower + proportionalChange){
+			actualPower += proportionalChange;
+		} else if (Power < actualPower - proportionalChange){
+			actualPower-= proportionalChange;
+		} else {
+			actualPower = Power;
+		}
+		return actualPower;
 	}
 
 	private void VerifyVelocity(double leftVel, double rightVel,
diff --git a/org/usfirst/frc/team1389/robot/ElevatorControl.java b/org/usfirst/frc/team1389/robot/ElevatorControl.java
index 0e934a8..d11db5d 100644
--- a/org/usfirst/frc/team1389/robot/ElevatorControl.java
+++ b/org/usfirst/frc/team1389/robot/ElevatorControl.java
@@ -16,6 +16,7 @@ public class ElevatorControl extends Component{
 	}
 	public void teleopTick(InputState state){
 		DigitalInput[] sensors=state.getInfared();
+		displayInfared(sensors);
 		int lastSensor=0;
 		for(int d=0;d<sensors.length;d++){
 			if(!sensors[d].get())lastSensor=d;
@@ -25,6 +26,11 @@ public class ElevatorControl extends Component{
 	}
 
 
+	private void displayInfared(DigitalInput[] sensors) {
+		for(int x=0;x<sensors.length; x++){
+			SmartDashboard.putBoolean("IR "+x, sensors[x].get());
+		}
+	}
 /** 
  * When input is given to bring the elevator to a specified level, this function provides the direction necessary to do so.
  * @param senseID represents the desired level you want to go to (Integers 0 - 4)
diff --git a/org/usfirst/frc/team1389/robot/Robot.java b/org/usfirst/frc/team1389/robot/Robot.java
index a769cfb..ba8f4f0 100644
--- a/org/usfirst/frc/team1389/robot/Robot.java
+++ b/org/usfirst/frc/team1389/robot/Robot.java
@@ -5,6 +5,7 @@ import java.util.ArrayList;
 import edu.wpi.first.wpilibj.DigitalInput;
 import edu.wpi.first.wpilibj.RobotBase;
 import edu.wpi.first.wpilibj.SampleRobot;
+import edu.wpi.first.wpilibj.Timer;
 import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
 
 /**
@@ -23,6 +24,7 @@ public class Robot extends SampleRobot {
 	//instance variables
 	ArrayList<Component> components;
 	InputState state;
+	Timer timer;
 		
 	/**
 	 * Instantiates all static motors and sensors. 
@@ -30,7 +32,7 @@ public class Robot extends SampleRobot {
 	 */
 	public Robot()
 	{
-		
+		timer = new Timer();
 		components = new ArrayList<Component>();
 		state = new InputState();
 		components.add(new DriveControl());
@@ -38,7 +40,6 @@ public class Robot extends SampleRobot {
 		SmartDashboard.putString("components:", components.toString());
 	}
 	
-	
 	/**
 	 * Teleoperated configuration
 	 * Update each component each iteration through the ".teleopTick()" method
@@ -51,11 +52,11 @@ public class Robot extends SampleRobot {
 		while (isOperatorControl())
 		{
 			state.tick();
-			SmartDashboard.putNumber("acceleration:",state.getAccelerometer().getX());
-			//SmartDashboard.putBoolean("dig 0", new DigitalInput(0).get());
+			SmartDashboard.putNumber("Acceleration:",state.getAccelerometer().getX());
 			for (Component c: components){
 				c.teleopTick(state);
 			}
+			timer.delay(.05);
 		}
 		
 	}
-- 
1.9.5.msysgit.0

